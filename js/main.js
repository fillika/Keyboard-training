const inputElement = document.querySelector("#input");
const textExampleElement = document.querySelector("#text-example");

const text = `Разнообразный и богатый опыт рамки и место обучения кадров обеспечивает широкому кругу (специалистов) участие в формировании новых предложений. Не следует, однако забывать, что новая модель организационной деятельности требуют от нас анализа системы обучения кадров, соответствует насущным потребностям. С другой стороны дальнейшее развитие различных форм деятельности играет важную роль в формировании системы обучения кадров, соответствует насущным потребностям. Равным образом постоянный количественный рост и сфера нашей активности в значительной степени обуславливает создание существенных финансовых и административных условий.
Не следует, однако забывать, что сложившаяся структура организации играет важную роль в формировании модели развития. Значимость этих проблем настолько очевидна, что консультация с широким активом влечет за собой процесс внедрения и модернизации модели развития. Разнообразный и богатый опыт постоянное информационно-пропагандистское обеспечение нашей деятельности обеспечивает широкому кругу (специалистов) участие в формировании системы обучения кадров, соответствует насущным потребностям.
Таким образом начало повседневной работы по формированию позиции способствует подготовки и реализации форм развития. Идейные соображения высшего порядка, а также постоянный количественный рост и сфера нашей активности в значительной степени обуславливает создание новых предложений. Товарищи! постоянный количественный рост и сфера нашей активности требуют определения и уточнения соответствующий условий активизации. Не следует, однако забывать, что дальнейшее развитие различных форм деятельности способствует подготовки и реализации существенных финансовых и административных условий.`;

const lines = getLines(text);

console.log(lines)

let letterId = 21; // Переменная, которая хранит в себе актуальный символ (тот символ, который мы ожидаем). Будем увеличивать её в будущем как счетчик

// Функция для создания текстовых строк для ввода
function getLines(text) {
  const lines = []; // Создаю будущий массив строк
  let line = []; // Создаю пустой массив
  let idCounter = 0; // Счетчик ID. Чтобы каждой букве присвоить ID

  for (let letter of text) {
    // цикл for of пройдет по каждому символу строки
    idCounter = idCounter + 1; // Каждому следующему сивмолу присваиваю id на 1 больше

    line.push({
      // При каждой итерации создаю объект, который имеет 3 свойства
      label: letter,
      id: idCounter,
      succes: true
    });
    if (line.length >= 70 || letter === "\n") {
      // Если Line содежит более 70 символов, то Я вношу её в массив lines, затем очищаю и начинаю по новой
      lines.push(line);
      line = []; // Очищаю
    }
  }

  if (line.length > 0) {
    lines.push(line); // После цикла остатки пушу в массив (все, что не влезло)
  }

  return lines;
}

// Функция создает div с классом Line И помещает в него букву. Так же оборачивает её в span и присваивает ему class (либо done либо hint)
function lineToHTML(line) {
  let divElement = document.createElement("div");
  divElement.classList.add("line");

  for (const letter of line) {
    const spanEl = document.createElement("span");
    spanEl.textContent = letter.label; // Беру символ из объекта и кладу в спан
    divElement.append(spanEl); // В самый конец нашего созданного дива мы добавляем этот элемент

    // Все символы, ID которых меньше letterID получают класс done
    if (letterId > letter.id) {
      spanEl.classList.add("done");
    }
  }
  console.log(divElement);
  return divElement;
}

function clearAndUpdate() {
  textExampleElement.innerHTML = ""; // Очищаю все что есть (неважно что было)

  for (const line of lines) { // Беру все, что содержится в lines (Там у нас все массивы, в которых содержаться объекты со свойствами в виде букв)
    const html = lineToHTML(line); // создаю переменную html, в которую?? Что???
    textExampleElement.append(html);
  }
}

clearAndUpdate();
